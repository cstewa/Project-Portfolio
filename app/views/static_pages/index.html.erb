<div id = "massive">
<div class= "row">
  <div class = "small-11 large-11 columns">
    <h1 id= "my_name">Christina Stewart</h1>
<!--     <hr id= "line_under_name">
 -->  </div>
  <div class= "large-1 small-1 columns"> </div>
</div>

<div class= "row">
  <div class = "small-10 small-offset-1 large-10 large-offset-1 columns" id= "intro">
    $('#full_stack_web_developer').html("Graduated from Penn in 2012 having studied English/Marketing. Admired the potential for disruption of the tech world and came out to the Valley to work in sales at an API management startup, and later technical marketing writing. Wanted to learn how the products I evangelized were built, so I decided to do a Web Development Boot Camp. Discovered that, along with and perhaps moreso than marketing them, I really enjoyed creating and programming apps. And seeing the tangible results of my work, which I have documented below. Hear more of my story and why I love to code <a href = "http://www.christinastewartsblog.com"> here. </a>"). </br> </br>
    //This is a <em> working </em> portfolio. More projects to showcase coming up!
  </div>
  <div class= "large-2 small-2 columns"> </div>
</div>

<div id = "slideshow">
  <a href = "#" id= "x"> Close. </a>
  <div id = "noesis_slideshow">
    <ul data-orbit>
      <li id = "live">
        <a href = "http://hereirealized.herokuapp.com/"> See Noesis live, </a>
        take a look at the<a href = "https://github.com/cstewa/WDI_FinalProject"> code, </a>
        <p> or be guided through it first and check it out afterwards! </p>
      </li>
      <li id = "impetus">
        <p class = "title"> IMPETUS: </p>
        <p class= "description_paragraph"> I was bungee jumping in New Zealand with two of my best friends. I hung from a 450 ft rope in the middle of a canyon. With nothing to anchor me amidst the vast, seemingly infinite mountains and fields, I lucidly discerned my atomity in relation to the the physical planet. I absorbed, calm and appreciative while overwhelmed and dwarfed. </br> </br> <a class = "continue_reading" href = "#"> Continue Reading... </a> </p>
      </li>
      <li>
        <img src="/assets/first_visit.png" />
        <div class="orbit-caption">When you first visit the site, the map centers itself based upon wherever you are visiting from (I am currently in Palo Alto, C.A). </div>
      </li>
      <li>
        <img src="/assets/everyone_filter.png" />
        <div class="orbit-caption">You can zoom out to see the images generated by every Noesis user. </div>
      </li>
      <li>
        <img src="/assets/caption.png" />
        <div class="orbit-caption">Clicking on a photo displays the thought associated with it. </div>
      </li>
      <li>
        <img src="/assets/sign_up.png" />
        <div class="orbit-caption">OAuth so users can log in or sign up with Twitter. Sorcery, a Ruby gem, for standard signup/login.</div>
      </li>
      <li>
        <img src="/assets/about_page.png" />
        <div class="orbit-caption">The About Page.</div>
      </li>
      <li>
        <img src="/assets/your_photos.png" />
        <div class="orbit-caption">You can filter by the photos that you've taken, and use the site kind of like a diary.</div>
      </li>
      <li>
        <img src="/assets/friends_photos.png" />
        <div class="orbit-caption">Or filter by the insights and images that your friends have contributed.</div>
      </li>
      <li>
        <img src="/assets/follow.png" />
        <div class="orbit-caption">Friends are determined by which users you elect to follow. Saving you as a follower is done using AJAX, for a faster site.</div>
      </li>
      <li>
        <img src="/assets/saving_photo.png" />
        <div class="orbit-caption">If the photo was taken on your phone and it had geolocation enabed, we use RMagick to get the latitude and longitude of wherever your phone was.</div>
      </li>
      <li>
        <img src="/assets/marker.png" />
        <div class="orbit-caption" id ="christina-first-side-caption">Otherwise, we prompt you to drag the red marker to wherever you were when you took the photo. Mapbox's API provides this draggable marker, as well as a JSON-esque map object, so we can parse it to get the latitude and longitude of the marker. We then AJAX these to the server. </div>
      </li>
      <li>
        <img src="/assets/saved_photo.png" />
        <div class="orbit-caption">We then JavaScript-reload the page, which displays the image where you marked it.</div>
      </li>
      <li>
        <img src="/assets/full_text.png" />
        <div class="orbit-caption">You can search for other thoughts that are similar to your thought or that are similar to any other thought on the page. The aim here is to connect insights/thoughts by topic. </div>
      </li>
      <li>
        <img src="/assets/mobile.png" />
        <div class="orbit-caption" id= "christina-second-side-caption"> On the mobile site, all of the photos taken in my vicinity appear as I hold up my phone and slowly move it. The mobile design clearly needs work, but at least we've got the functionality down! The aim here is to connect insights/thoughts by geographical location. </div>
      </li>
      <li id = "target_audience">
        <p class= "bigger_font">If this goes further...</p>
        <a href= "#" class= "title target">  TARGET AUDIENCE -> </a>
        <p> </p>
        <a href = "#" class = "title challenges"> CHALLENGES -> </a>
        <p> </p>
        <a href = "#" class = "title features"> FUTURE FEATURES -> </a>
        <p> </p>
      </li>
    </ul>
  </div>
  <div id= "corequest_slideshow">
    <ul data-orbit>
      <li id = "live">
         Take a look at the<a href = "https://github.com/cstewa/project-x"> code, </a>
        <p> or be guided through it first and check it out afterwards! When checking out the code, please note the model structure, the Nokogiri-scraped seed file, and the "search" and "bundles" controller/views. </p>
      </li>
      <li>
        <p class = "pink" id= "one-liner"> COREQUEST </p>
        <p class= "pink" id= "one-liner-p"> CoreQuest allows teachers to search and categorize our massive database of free online resources aligned wtih Common Core State Standards. </p>
      </li>
      <li>
        <p class = "pink" id= "what-are-ccss">WHAT ARE COMMON CORE STATE STANDARDS?</p>
        <p class= "pink" id= "what-are-ccss-p"> 70% of schools in the U.S. are public. The majority rely on standards to guide their teaching practice. Common Core State Standards build high level critical thinking skills, while standardizing reading and math nation-wide. 45 states have now joined the Common Core initiative. California, for example, begins transitioning to Common Core standardized testing next year. Ed Tech has also taken notice. Khan Academy recently received a $2.2 million grant to create math content aligned with Common Core State Standards. </p>
      </li>
      <li>
        <p id= "corequest_capabilities" class = "pink">COREQUEST CAPABILITIES</p>
        <p class= "pink" id= "corequest_capabilities_p"> More than ever before, teachers are looking to the internet to find resources aligned with standards. Now that most states adhere to the same standards, CoreQuest is in a unique position to extend a hand to teachers nation-wide. Teachers can search for free online resources, including Khan Academy videos, by subject, grade, topic, and standard. They then bundle resources with similar standards for classroom use. Teachers can share CoreQuest bundles with an entire class or assign bundles to individual students. </p>
      </li>
      <li>
        <img src="/assets/teacher_search.png" />
        <div class="orbit-caption">We AJAX what topic and grade they search to a controller, which traverses our db and allows us to display only the results relevant to what the user clicked. We obtained all of the resources in our database by using Nokogiri to scrape a significant portion of the Khan Academy website along with another learning website. </div>
      </li>
      <li>
        <img src="/assets/bundler.png" />
        <div class="orbit-caption">We use two jQuery plugins for the resources-to-be-bundled to scroll sideways, and the resources not yet bundled to move on the page when added to the bundle. Intricate db queries based on the params of what the teacher had searched tell the page what resources to display! </div>
      </li>
      <li>
        <img src="/assets/show_bundle.png" />
        <div class="orbit-caption">Teachers can view a bundle and click on the bottom to edit it, where they will be taken back to the same page where they initially created the bundle. (Except now of course it displays the resources according to whether or not the teacher has already bundled them).</div>
      </li>
      <li>
        <img src="/assets/user_show_bundle.png" />
        <div class="orbit-caption">Teachers can view all of their bundles from their profile and click links to show, edit, or delete the bundle.</div>
      </li>
    </ul>
  </div>
  <div id= "trivia_slideshow">
    <ul data-orbit>
      <li id = "live">
        <a href = "http://stormy-savannah-2602.herokuapp.com/"> See our Tech Trivia game live, </a>
        take a look at the <a href = "https://github.com/cstewa/Tech-Trivia"> code, </a>
        <p> or be guided through it first and check it out afterwards! </p>
      </li>
      <li id = "trivia_about">
        <h3>hashestachetoWHAT?</h3>
        <p> For this project, we were instructed to make a trivia game. There are three users, each of whom is assigned a key on the keyboard. If one thinks they know the right answer, they press their key and can click on the proper answer. Whoever gets the greatest number of right answers at the end wins. </p>
        <p> The topic is based on an inside-joke (and a nerdy one) that we had with all of our classmates. One of us made an app based off of turning Github's "Octocat" into a cat with a "hash"-mustache, that purported to help (read: terrify) little kids who want to learn to code. </p>
      </li>
      <li>
        <img src="/assets/game_load.png" />
        <div class="orbit-caption trivia"> If Baylee thinks she knows the answer, she presses "B" and her name is highlighted. She now has the chance to try to choose the proper answer. The game is a Rails app written almost entirely in CoffeeScript. </div>
      </li>
      <li>
        <img src="/assets/wrong_answer.png" />
        <div class="orbit-caption trivia">Should she choose the wrong answer, we use a JQuery-UI plugin to "shake" the answers. We discern whether or not the answer is correct by sending an AJAX call to a controller and action with data about the chosen answer. Our answers are saved in our PSQL database with an is_correct Boolean column. Our JSON response indicates whether or not is_correct is true, and we handle this upon the success of our call. </div>
      </li>
      <li>
        <img src="/assets/hashstachelast.png" />
        <div id= "trivia_long" class="orbit-caption trivia">We display the next question and set of answers via a similar process: sending an AJAX call containing data about the current question. We get this data from the "data" attribute of an element on the page. We run a SQL query to find the current question in our PSQL database, return to us the subsequent question (the question whose ID is one greater), and set the new current question to that question. We then display it and use CoffeeScript to change the "data" attribute of our element to hold information about this new current question instead, so that the process can start again. </div>
      </li>
    </ul>
  </div>
  <div id= "tradr_slideshow">
    <ul data-orbit>
      <li class = "pink description_paragraph" >
        Code is <a href = "https://github.com/cstewa/Tech-Trivia"> here. </a> Please focus on the user.js page, the stocks_controller and the _stocks_rows partial because that's where the coolest parts are. </br> </br>
        <p> Or learn what it's about first and check it out afterwards! </p>
      </li>
      <li class= "pink">
        <p style="margin-top:20%;width:80%;margin-left:12%"> I was instructed to build an app where users can "buy" a certain amount of shares of a stock. A user can see the price when they first bought it, the latest price, and their profit. My key assignment was to use the morris.js API/library to make a line chart that updates the current price of the stock in real-time, every five seconds. This way, a user sees a continuously moving line indicating the rise and fall of their share of a given stock. </p>
      </li>
      <li>
        <img id= "first_tradr_image" src="/assets/stocks_basic.png" />
        <div class="orbit-caption" id= "christina-third-side-caption">  I use AJAX to send the stock symbol to the controller, which sends back data about the stock. I then plot a graph of this data with js. I had created a hash whose keys were stock symbols and values were arrays of data about that stock. Every 5 seconds, I resend the AJAX call which, upon success, pushes new data into the proper array. This way, the graph of the stock symbol keeps the previous data (because its stored in the array) and gets the new data (because its stored in the same array). This tactic also lets a user view multiple stocks simultaneously!  </div>
      </li>
    </ul>
  </div>
  <div id= "thrillr_slideshow">
    <ul data-orbit>
      <li class= "pink">
        <p style="margin-top:20%;width:80%;margin-left:12%"> Code <a href = "https://github.com/cstewa/Thrillr-" >here. </a> </br> </br> I was instructed to build a movie theater app where users can browse movies and "purchase" tickets, with seat numbers, to a specfic showing. Specifically, I needed to wisely create my model structure to simulate a real Fandango-esque site, use TDD to test these models, and seed movies and tickets into my database. I also needed to build user authentication from scratch and AJAX the seats that the user clicks to buy so he/she doesn't need to wait for the page to reload. Click <a href= "https://github.com/sumeetjain/WDI-SF-May-2013/wiki/Homework#thursday-july-4"> here </a> to view the written instructions.</p>
      </li>
      <li>
        <img src = "/assets/movies_show.png" />
        <div class = "orbit-caption">
          I made my theatre thriller/horror movie-only. This page shows all the movies playing at Thrillr Theatre. One of the films is a screenplay I wrote for a screenwriting class at Penn called Insidious :)
        </div>
      </li>
      <li>
        <img src = "/assets/movie_showings.png" />
        <div class = "orbit-caption">
          Click a film to see all of th dates and times it plays at Thrillr. This is my "showings" model: each showing belongs to a movie, has many tickets, and has many :users, :through => tickets.
        </div>
      </li>
      <li>
        <img src = "/assets/clicking_a6.png" />
        <div class = "orbit-caption">
          Click a seat to buy that seat. This link passes the seat's id through the URL to the tickets controller, update action, which renders a tickets.js view page.
        </div>
      </li>
      <li>
        <img src = "/assets/clicked_a6.png" />
        <div class = "orbit-caption">
          Tickets.js ensures that the current_user has only bought less than 5 tickets to that showing (I was instructed to limit the amount of tickets a user can buy). If this is the case, I save that ticket to the current_user, and make it unclickable via jQuery.
        </div>
      </li>
      <li>
        <img src = "/assets/thrillr_user_profile.png" />
        <div class = "orbit-caption">
          Now, the user's profile shows that they have just bought those two tickets.
        </div>
      </li>
    </ul>
  </div>

  <div id= "paintr_slideshow">
    <ul data-orbit>
      <li class= "pink">
        <p style="margin-top:20%;width:80%;margin-left:12%"> Code <a href = "https://github.com/cstewa/paintr" >here. </a> </br> </br> I was instructed to build a JavaScript/jQuery painting app where users can type any color they want to paint with. They can also paste any image url and the image will appear on the page for them to paint over. The key challenge was to find a way to save the newly-painted-over image to the database so that a user could share it. </p>
      </li>
      <li>
        <img src = "/assets/paintr_add_colors.png" />
        <div class = "orbit-caption" id= "paintr-caption-one">
          Type in a color. JS/jQuery isolate the color you typed in and sets the background-color of the small box it creates to that color.
        </div>
      </li>
      <li>
        <img src = "/assets/paintr_add_images.png" />
        <div class = "orbit-caption" id= "paintr-caption-two">
          Type in an image URL. JS isolates the url you typed in and sets the background-image of the small box it creates to that image.
        </div>
      </li>
      <li>
        <img src = "/assets/painting_image.png" />
        <div class = "orbit-caption" id= "paintr-caption-three">
          Click the box with the image you want to paint over. On click, JS/jQuery get the background image of the small box and set the large painting box's background image to that image. Click the box with the color you want to paint with. The large painting box has thousands of small divs, each whose background-color changes to that color when hovered-over.
        </div>
      </li>
      <li>
        <img src = "/assets/paintr_saved_image.png" />
        <div class = "orbit-caption" id= "paintr-caption-four">
          When an image is saved, I isolate its url, which is provided by the "style" attribute. The jQuery .html() method lets me know which tiny divs have the specified background color and which do not. I AJAX this to the controller, which saves this image to the database. When re-rendering these images on the index and show pages, I merely create divs with style attributes equal to the images' urls. Each image div also contain all the tiny divs, whose background color corresponds to how they were saved. I was one of only two students in the class to finish this portion of the assignment! (Although in a future iteration I would create an array or a hash specifying which divs have which background colors, rather than saving all the divs. This would save database space.)
        </div>
      </li>
    </ul>
  </div>
</div>


<div class = "row">

  <div class = "row">
    <div class= "small-8 large-8 columns">
      <div id= "project_holder" class= "row">

        <div id= "insights" class = "small-6 large-6 columns">
          <a href = "#" class = "pink" class = "move_down"> Noesis. </a>
          <img class = "proj_image" src= "/assets/noesis.png" />
          <div class = "make_rods_pink">
            <span>Rails</span> | <span>OAuth</span> | <span>REST APIs</span> | <span>JavaScript</span> | <span>CSS </span> | <span id= "ajax">AJAX</span>
            | <span> Augmented Reality</span>
          </div>
        </div>

        <div id= "corequest" class = "small-6 large-6 columns">
          <a href = "#" class = "pink" class = "move_down"> CoreQuest. </a>
          <img class = "proj_image" src= "/assets/bundler.png" />
          <div class = "make_rods_pink">
            <span>Rails</span> | <span>AJAX</span> | <span>HTML/CSS</span> | <span>JavaScript</span> | <span> Nokogiri Gem </span>
          </div>
        </div>

        <div class = "row">

          <div id= "trivia" class = "small-6 large-6 columns">
            <a href = "#" class = "pink" class = "move_down"> TechTrivia. </a>
            <img id = "hashstache_img" class = "proj_image" src= "/assets/hashstache.png" />
            <div class = "make_rods_pink">
              <span>CoffeeScript</span> | <span>Rails</span> | <span>HTML/CSS</span>
            </div>
          </div>

          <div id= "tradr" class = "small-6 large-6 columns">
            <a href = "#" class = "pink" class = "move_down"> Tradr. </a>
            <img class = "proj_image" src= "/assets/tradr_small.png" />
            <div class = "make_rods_pink">
              <span>JavaScript</span> | <span>Rails</span> | <span>AJAX</span> | <span>HAML</span> | <span>Morris.js </span> | <span> Ruby Gem </span>
            </div>
          </div>

        </div>

        <div class = "row">

          <div id= "thrillr" class = "small-6 large-6 columns">
            <a href = "#" class = "pink" class = "move_down"> Thrillr. </a>
            <img class = "proj_image" src= "/assets/movies_show.png" />
            <div class = "make_rods_pink">
              <span>Rails</span> | <span>AJAX</span> | <span>RSpec/TDD</span>
            </div>
          </div>

          <div id= "paintr" class = "small-6 large-6 columns">
            <a href = "#" class = "pink" class = "move_down"> Paintr. </a>
            <img class = "proj_image" src= "/assets/paintr_main.png" />
            <div class = "make_rods_pink">
              <span>JavaScript</span> | <span>AJAX</span> | <span>jQuery</span> | <span>HAML</span>| <span>Rails</span>
            </div>
          </div>

        </div>

      </div>
    </div>
    <div class= "small-2 large-2 columns">
      <div id= "contact">
        <a href = "http://www.christinastewartsblog.com"> tech_blog </a>
        </br>
        <a href = "https://github.com/cstewa"> git_hub </a>
        </br>
        <span href= "#" id= "email_link"> email </span>
        </br>
        <a href = "http://www.linkedin.com/pub/christina-stewart/20/250/19a/"> linked_in </a>
        </br>
        <a href = "https://twitter.com/christinaa11"> twitter </a>
      </div>
    </div>
  </div>
</div>
</div>

